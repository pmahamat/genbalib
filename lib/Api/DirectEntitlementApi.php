<?php
/**
 * DirectEntitlementApi
 * PHP version 5
 *
 * @category Class
 * @package  Genba\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Genba Digital Distribution API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Genba\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Genba\Client\ApiException;
use Genba\Client\Configuration;
use Genba\Client\HeaderSelector;
use Genba\Client\ObjectSerializer;

/**
 * DirectEntitlementApi Class Doc Comment
 *
 * @category Class
 * @package  Genba\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DirectEntitlementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation directEntitlementActivateAsync
     *
     * Perform a direct entitlement activation
     *
     * @param  \Genba\Client\Model\DirectEntitlementActivationRequest $request Request specifying your direct entitlement activation (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Genba\Client\Model\DirectEntitlementResponse
     */
    public function directEntitlementActivateAsync($request, $authorization)
    {
        list($response) = $this->directEntitlementActivateAsyncWithHttpInfo($request, $authorization);
        return $response;
    }

    /**
     * Operation directEntitlementActivateAsyncWithHttpInfo
     *
     * Perform a direct entitlement activation
     *
     * @param  \Genba\Client\Model\DirectEntitlementActivationRequest $request Request specifying your direct entitlement activation (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Genba\Client\Model\DirectEntitlementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directEntitlementActivateAsyncWithHttpInfo($request, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementActivateAsyncRequest($request, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\DirectEntitlementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directEntitlementActivateAsyncAsync
     *
     * Perform a direct entitlement activation
     *
     * @param  \Genba\Client\Model\DirectEntitlementActivationRequest $request Request specifying your direct entitlement activation (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementActivateAsyncAsync($request, $authorization)
    {
        return $this->directEntitlementActivateAsyncAsyncWithHttpInfo($request, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directEntitlementActivateAsyncAsyncWithHttpInfo
     *
     * Perform a direct entitlement activation
     *
     * @param  \Genba\Client\Model\DirectEntitlementActivationRequest $request Request specifying your direct entitlement activation (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementActivateAsyncAsyncWithHttpInfo($request, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementActivateAsyncRequest($request, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directEntitlementActivateAsync'
     *
     * @param  \Genba\Client\Model\DirectEntitlementActivationRequest $request Request specifying your direct entitlement activation (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directEntitlementActivateAsyncRequest($request, $authorization)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling directEntitlementActivateAsync'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling directEntitlementActivateAsync'
            );
        }

        $resourcePath = '/api/v3-0/directentitlement/activations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directEntitlementPerformActivationActionAsync
     *
     * Perform an action on an activation
     *
     * @param  string $activationid Unique ID of the activation (required)
     * @param  \Genba\Client\Model\DirectEntitlementAction $action The action you want to perform (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Genba\Client\Model\DirectEntitlementResponse
     */
    public function directEntitlementPerformActivationActionAsync($activationid, $action, $authorization)
    {
        list($response) = $this->directEntitlementPerformActivationActionAsyncWithHttpInfo($activationid, $action, $authorization);
        return $response;
    }

    /**
     * Operation directEntitlementPerformActivationActionAsyncWithHttpInfo
     *
     * Perform an action on an activation
     *
     * @param  string $activationid Unique ID of the activation (required)
     * @param  \Genba\Client\Model\DirectEntitlementAction $action The action you want to perform (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Genba\Client\Model\DirectEntitlementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directEntitlementPerformActivationActionAsyncWithHttpInfo($activationid, $action, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementPerformActivationActionAsyncRequest($activationid, $action, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\DirectEntitlementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directEntitlementPerformActivationActionAsyncAsync
     *
     * Perform an action on an activation
     *
     * @param  string $activationid Unique ID of the activation (required)
     * @param  \Genba\Client\Model\DirectEntitlementAction $action The action you want to perform (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementPerformActivationActionAsyncAsync($activationid, $action, $authorization)
    {
        return $this->directEntitlementPerformActivationActionAsyncAsyncWithHttpInfo($activationid, $action, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directEntitlementPerformActivationActionAsyncAsyncWithHttpInfo
     *
     * Perform an action on an activation
     *
     * @param  string $activationid Unique ID of the activation (required)
     * @param  \Genba\Client\Model\DirectEntitlementAction $action The action you want to perform (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementPerformActivationActionAsyncAsyncWithHttpInfo($activationid, $action, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementPerformActivationActionAsyncRequest($activationid, $action, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directEntitlementPerformActivationActionAsync'
     *
     * @param  string $activationid Unique ID of the activation (required)
     * @param  \Genba\Client\Model\DirectEntitlementAction $action The action you want to perform (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directEntitlementPerformActivationActionAsyncRequest($activationid, $action, $authorization)
    {
        // verify the required parameter 'activationid' is set
        if ($activationid === null || (is_array($activationid) && count($activationid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activationid when calling directEntitlementPerformActivationActionAsync'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling directEntitlementPerformActivationActionAsync'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling directEntitlementPerformActivationActionAsync'
            );
        }

        $resourcePath = '/api/v3-0/directentitlement/activations/{activationid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($activationid !== null) {
            $resourcePath = str_replace(
                '{' . 'activationid' . '}',
                ObjectSerializer::toPathValue($activationid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($action)) {
            $_tempBody = $action;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directEntitlementPerformRedemptionActionAsync
     *
     * Perform an action on a redemption
     *
     * @param  string $redemptionid Unique ID of the redemption (required)
     * @param  \Genba\Client\Model\DirectEntitlementAction $action The action you want to perform (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Genba\Client\Model\DirectEntitlementResponse
     */
    public function directEntitlementPerformRedemptionActionAsync($redemptionid, $action, $authorization)
    {
        list($response) = $this->directEntitlementPerformRedemptionActionAsyncWithHttpInfo($redemptionid, $action, $authorization);
        return $response;
    }

    /**
     * Operation directEntitlementPerformRedemptionActionAsyncWithHttpInfo
     *
     * Perform an action on a redemption
     *
     * @param  string $redemptionid Unique ID of the redemption (required)
     * @param  \Genba\Client\Model\DirectEntitlementAction $action The action you want to perform (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Genba\Client\Model\DirectEntitlementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directEntitlementPerformRedemptionActionAsyncWithHttpInfo($redemptionid, $action, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementPerformRedemptionActionAsyncRequest($redemptionid, $action, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\DirectEntitlementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directEntitlementPerformRedemptionActionAsyncAsync
     *
     * Perform an action on a redemption
     *
     * @param  string $redemptionid Unique ID of the redemption (required)
     * @param  \Genba\Client\Model\DirectEntitlementAction $action The action you want to perform (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementPerformRedemptionActionAsyncAsync($redemptionid, $action, $authorization)
    {
        return $this->directEntitlementPerformRedemptionActionAsyncAsyncWithHttpInfo($redemptionid, $action, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directEntitlementPerformRedemptionActionAsyncAsyncWithHttpInfo
     *
     * Perform an action on a redemption
     *
     * @param  string $redemptionid Unique ID of the redemption (required)
     * @param  \Genba\Client\Model\DirectEntitlementAction $action The action you want to perform (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementPerformRedemptionActionAsyncAsyncWithHttpInfo($redemptionid, $action, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementPerformRedemptionActionAsyncRequest($redemptionid, $action, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directEntitlementPerformRedemptionActionAsync'
     *
     * @param  string $redemptionid Unique ID of the redemption (required)
     * @param  \Genba\Client\Model\DirectEntitlementAction $action The action you want to perform (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directEntitlementPerformRedemptionActionAsyncRequest($redemptionid, $action, $authorization)
    {
        // verify the required parameter 'redemptionid' is set
        if ($redemptionid === null || (is_array($redemptionid) && count($redemptionid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redemptionid when calling directEntitlementPerformRedemptionActionAsync'
            );
        }
        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling directEntitlementPerformRedemptionActionAsync'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling directEntitlementPerformRedemptionActionAsync'
            );
        }

        $resourcePath = '/api/v3-0/directentitlement/redemptions/{redemptionid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($redemptionid !== null) {
            $resourcePath = str_replace(
                '{' . 'redemptionid' . '}',
                ObjectSerializer::toPathValue($redemptionid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($action)) {
            $_tempBody = $action;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directEntitlementRedeemAsync
     *
     * Perform a direct entitlement redemption
     *
     * @param  \Genba\Client\Model\DirectEntitlementRedemptionRequest $request Information about the redemption to be performed (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Genba\Client\Model\DirectEntitlementResponse
     */
    public function directEntitlementRedeemAsync($request, $authorization)
    {
        list($response) = $this->directEntitlementRedeemAsyncWithHttpInfo($request, $authorization);
        return $response;
    }

    /**
     * Operation directEntitlementRedeemAsyncWithHttpInfo
     *
     * Perform a direct entitlement redemption
     *
     * @param  \Genba\Client\Model\DirectEntitlementRedemptionRequest $request Information about the redemption to be performed (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Genba\Client\Model\DirectEntitlementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directEntitlementRedeemAsyncWithHttpInfo($request, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementRedeemAsyncRequest($request, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\DirectEntitlementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directEntitlementRedeemAsyncAsync
     *
     * Perform a direct entitlement redemption
     *
     * @param  \Genba\Client\Model\DirectEntitlementRedemptionRequest $request Information about the redemption to be performed (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementRedeemAsyncAsync($request, $authorization)
    {
        return $this->directEntitlementRedeemAsyncAsyncWithHttpInfo($request, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directEntitlementRedeemAsyncAsyncWithHttpInfo
     *
     * Perform a direct entitlement redemption
     *
     * @param  \Genba\Client\Model\DirectEntitlementRedemptionRequest $request Information about the redemption to be performed (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementRedeemAsyncAsyncWithHttpInfo($request, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementRedeemAsyncRequest($request, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directEntitlementRedeemAsync'
     *
     * @param  \Genba\Client\Model\DirectEntitlementRedemptionRequest $request Information about the redemption to be performed (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directEntitlementRedeemAsyncRequest($request, $authorization)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling directEntitlementRedeemAsync'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling directEntitlementRedeemAsync'
            );
        }

        $resourcePath = '/api/v3-0/directentitlement/redemptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directEntitlementRetrieveActivationAsync
     *
     * Retrieve a direct entitlement activation
     *
     * @param  string $activationid The ID of the activation your want to retrieve (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Genba\Client\Model\DirectEntitlementResponse
     */
    public function directEntitlementRetrieveActivationAsync($activationid, $authorization)
    {
        list($response) = $this->directEntitlementRetrieveActivationAsyncWithHttpInfo($activationid, $authorization);
        return $response;
    }

    /**
     * Operation directEntitlementRetrieveActivationAsyncWithHttpInfo
     *
     * Retrieve a direct entitlement activation
     *
     * @param  string $activationid The ID of the activation your want to retrieve (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Genba\Client\Model\DirectEntitlementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directEntitlementRetrieveActivationAsyncWithHttpInfo($activationid, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementRetrieveActivationAsyncRequest($activationid, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\DirectEntitlementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directEntitlementRetrieveActivationAsyncAsync
     *
     * Retrieve a direct entitlement activation
     *
     * @param  string $activationid The ID of the activation your want to retrieve (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementRetrieveActivationAsyncAsync($activationid, $authorization)
    {
        return $this->directEntitlementRetrieveActivationAsyncAsyncWithHttpInfo($activationid, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directEntitlementRetrieveActivationAsyncAsyncWithHttpInfo
     *
     * Retrieve a direct entitlement activation
     *
     * @param  string $activationid The ID of the activation your want to retrieve (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementRetrieveActivationAsyncAsyncWithHttpInfo($activationid, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementRetrieveActivationAsyncRequest($activationid, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directEntitlementRetrieveActivationAsync'
     *
     * @param  string $activationid The ID of the activation your want to retrieve (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directEntitlementRetrieveActivationAsyncRequest($activationid, $authorization)
    {
        // verify the required parameter 'activationid' is set
        if ($activationid === null || (is_array($activationid) && count($activationid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $activationid when calling directEntitlementRetrieveActivationAsync'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling directEntitlementRetrieveActivationAsync'
            );
        }

        $resourcePath = '/api/v3-0/directentitlement/activations/{activationid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($activationid !== null) {
            $resourcePath = str_replace(
                '{' . 'activationid' . '}',
                ObjectSerializer::toPathValue($activationid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directEntitlementRetrieveActivationByCtidAsync
     *
     * Retrieve a direct entitlement activation by its Client Transaction ID
     *
     * @param  string $ctid The Client Transaction ID of the activation you want to retrieve (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Genba\Client\Model\DirectEntitlementResponse
     */
    public function directEntitlementRetrieveActivationByCtidAsync($ctid, $authorization)
    {
        list($response) = $this->directEntitlementRetrieveActivationByCtidAsyncWithHttpInfo($ctid, $authorization);
        return $response;
    }

    /**
     * Operation directEntitlementRetrieveActivationByCtidAsyncWithHttpInfo
     *
     * Retrieve a direct entitlement activation by its Client Transaction ID
     *
     * @param  string $ctid The Client Transaction ID of the activation you want to retrieve (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Genba\Client\Model\DirectEntitlementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directEntitlementRetrieveActivationByCtidAsyncWithHttpInfo($ctid, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementRetrieveActivationByCtidAsyncRequest($ctid, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\DirectEntitlementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directEntitlementRetrieveActivationByCtidAsyncAsync
     *
     * Retrieve a direct entitlement activation by its Client Transaction ID
     *
     * @param  string $ctid The Client Transaction ID of the activation you want to retrieve (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementRetrieveActivationByCtidAsyncAsync($ctid, $authorization)
    {
        return $this->directEntitlementRetrieveActivationByCtidAsyncAsyncWithHttpInfo($ctid, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directEntitlementRetrieveActivationByCtidAsyncAsyncWithHttpInfo
     *
     * Retrieve a direct entitlement activation by its Client Transaction ID
     *
     * @param  string $ctid The Client Transaction ID of the activation you want to retrieve (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementRetrieveActivationByCtidAsyncAsyncWithHttpInfo($ctid, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementRetrieveActivationByCtidAsyncRequest($ctid, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directEntitlementRetrieveActivationByCtidAsync'
     *
     * @param  string $ctid The Client Transaction ID of the activation you want to retrieve (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directEntitlementRetrieveActivationByCtidAsyncRequest($ctid, $authorization)
    {
        // verify the required parameter 'ctid' is set
        if ($ctid === null || (is_array($ctid) && count($ctid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ctid when calling directEntitlementRetrieveActivationByCtidAsync'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling directEntitlementRetrieveActivationByCtidAsync'
            );
        }

        $resourcePath = '/api/v3-0/directentitlement/activations/ctid/{ctid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($ctid !== null) {
            $resourcePath = str_replace(
                '{' . 'ctid' . '}',
                ObjectSerializer::toPathValue($ctid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directEntitlementRetrieveRedemptionAsync
     *
     * Retrieve a direct entitlement redemption
     *
     * @param  string $redemptionid Unique ID of the redemption (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Genba\Client\Model\DirectEntitlementResponse
     */
    public function directEntitlementRetrieveRedemptionAsync($redemptionid, $authorization)
    {
        list($response) = $this->directEntitlementRetrieveRedemptionAsyncWithHttpInfo($redemptionid, $authorization);
        return $response;
    }

    /**
     * Operation directEntitlementRetrieveRedemptionAsyncWithHttpInfo
     *
     * Retrieve a direct entitlement redemption
     *
     * @param  string $redemptionid Unique ID of the redemption (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Genba\Client\Model\DirectEntitlementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directEntitlementRetrieveRedemptionAsyncWithHttpInfo($redemptionid, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementRetrieveRedemptionAsyncRequest($redemptionid, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\DirectEntitlementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directEntitlementRetrieveRedemptionAsyncAsync
     *
     * Retrieve a direct entitlement redemption
     *
     * @param  string $redemptionid Unique ID of the redemption (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementRetrieveRedemptionAsyncAsync($redemptionid, $authorization)
    {
        return $this->directEntitlementRetrieveRedemptionAsyncAsyncWithHttpInfo($redemptionid, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directEntitlementRetrieveRedemptionAsyncAsyncWithHttpInfo
     *
     * Retrieve a direct entitlement redemption
     *
     * @param  string $redemptionid Unique ID of the redemption (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementRetrieveRedemptionAsyncAsyncWithHttpInfo($redemptionid, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementRetrieveRedemptionAsyncRequest($redemptionid, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directEntitlementRetrieveRedemptionAsync'
     *
     * @param  string $redemptionid Unique ID of the redemption (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directEntitlementRetrieveRedemptionAsyncRequest($redemptionid, $authorization)
    {
        // verify the required parameter 'redemptionid' is set
        if ($redemptionid === null || (is_array($redemptionid) && count($redemptionid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redemptionid when calling directEntitlementRetrieveRedemptionAsync'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling directEntitlementRetrieveRedemptionAsync'
            );
        }

        $resourcePath = '/api/v3-0/directentitlement/redemptions/{redemptionid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($redemptionid !== null) {
            $resourcePath = str_replace(
                '{' . 'redemptionid' . '}',
                ObjectSerializer::toPathValue($redemptionid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation directEntitlementRetrieveRedemptionByCtidAsync
     *
     * Retrieve a direct entitlement redemption by its Client Transaction ID
     *
     * @param  string $ctid Client Transaction ID of the redemption (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Genba\Client\Model\DirectEntitlementResponse
     */
    public function directEntitlementRetrieveRedemptionByCtidAsync($ctid, $authorization)
    {
        list($response) = $this->directEntitlementRetrieveRedemptionByCtidAsyncWithHttpInfo($ctid, $authorization);
        return $response;
    }

    /**
     * Operation directEntitlementRetrieveRedemptionByCtidAsyncWithHttpInfo
     *
     * Retrieve a direct entitlement redemption by its Client Transaction ID
     *
     * @param  string $ctid Client Transaction ID of the redemption (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \Genba\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Genba\Client\Model\DirectEntitlementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function directEntitlementRetrieveRedemptionByCtidAsyncWithHttpInfo($ctid, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementRetrieveRedemptionByCtidAsyncRequest($ctid, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\DirectEntitlementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Genba\Client\Model\ErrorResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation directEntitlementRetrieveRedemptionByCtidAsyncAsync
     *
     * Retrieve a direct entitlement redemption by its Client Transaction ID
     *
     * @param  string $ctid Client Transaction ID of the redemption (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementRetrieveRedemptionByCtidAsyncAsync($ctid, $authorization)
    {
        return $this->directEntitlementRetrieveRedemptionByCtidAsyncAsyncWithHttpInfo($ctid, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation directEntitlementRetrieveRedemptionByCtidAsyncAsyncWithHttpInfo
     *
     * Retrieve a direct entitlement redemption by its Client Transaction ID
     *
     * @param  string $ctid Client Transaction ID of the redemption (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function directEntitlementRetrieveRedemptionByCtidAsyncAsyncWithHttpInfo($ctid, $authorization)
    {
        $returnType = '\Genba\Client\Model\DirectEntitlementResponse';
        $request = $this->directEntitlementRetrieveRedemptionByCtidAsyncRequest($ctid, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'directEntitlementRetrieveRedemptionByCtidAsync'
     *
     * @param  string $ctid Client Transaction ID of the redemption (required)
     * @param  string $authorization Access token from AAD. Should start with &#39;Bearer &#39;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function directEntitlementRetrieveRedemptionByCtidAsyncRequest($ctid, $authorization)
    {
        // verify the required parameter 'ctid' is set
        if ($ctid === null || (is_array($ctid) && count($ctid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ctid when calling directEntitlementRetrieveRedemptionByCtidAsync'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling directEntitlementRetrieveRedemptionByCtidAsync'
            );
        }

        $resourcePath = '/api/v3-0/directentitlement/redemptions/ctid/{ctid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($ctid !== null) {
            $resourcePath = str_replace(
                '{' . 'ctid' . '}',
                ObjectSerializer::toPathValue($ctid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
