<?php
/**
 * ReservationResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Genba\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Genba Digital Distribution API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Genba\Client\Model;

use \ArrayAccess;
use \Genba\Client\ObjectSerializer;

/**
 * ReservationResponse Class Doc Comment
 *
 * @category Class
 * @package  Genba\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReservationResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReservationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'client_transaction_id' => 'string',
        'sku' => 'string',
        'state' => 'int',
        'order_id' => 'string',
        'created' => 'string',
        'expiration' => 'string',
        'communicated_buying_price' => '\Genba\Client\Model\BuyingPrice',
        'actual_buying_price' => '\Genba\Client\Model\BuyingPrice',
        'selling_price' => '\Genba\Client\Model\SellingPrice'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'client_transaction_id' => null,
        'sku' => null,
        'state' => 'int32',
        'order_id' => null,
        'created' => null,
        'expiration' => null,
        'communicated_buying_price' => null,
        'actual_buying_price' => null,
        'selling_price' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'client_transaction_id' => 'ClientTransactionID',
        'sku' => 'Sku',
        'state' => 'State',
        'order_id' => 'OrderID',
        'created' => 'Created',
        'expiration' => 'Expiration',
        'communicated_buying_price' => 'CommunicatedBuyingPrice',
        'actual_buying_price' => 'ActualBuyingPrice',
        'selling_price' => 'SellingPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'client_transaction_id' => 'setClientTransactionId',
        'sku' => 'setSku',
        'state' => 'setState',
        'order_id' => 'setOrderId',
        'created' => 'setCreated',
        'expiration' => 'setExpiration',
        'communicated_buying_price' => 'setCommunicatedBuyingPrice',
        'actual_buying_price' => 'setActualBuyingPrice',
        'selling_price' => 'setSellingPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'client_transaction_id' => 'getClientTransactionId',
        'sku' => 'getSku',
        'state' => 'getState',
        'order_id' => 'getOrderId',
        'created' => 'getCreated',
        'expiration' => 'getExpiration',
        'communicated_buying_price' => 'getCommunicatedBuyingPrice',
        'actual_buying_price' => 'getActualBuyingPrice',
        'selling_price' => 'getSellingPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_0 = 0;
    const STATE_1 = 1;
    const STATE_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_0,
            self::STATE_1,
            self::STATE_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['client_transaction_id'] = isset($data['client_transaction_id']) ? $data['client_transaction_id'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['communicated_buying_price'] = isset($data['communicated_buying_price']) ? $data['communicated_buying_price'] : null;
        $this->container['actual_buying_price'] = isset($data['actual_buying_price']) ? $data['actual_buying_price'] : null;
        $this->container['selling_price'] = isset($data['selling_price']) ? $data['selling_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['client_transaction_id'] === null) {
            $invalidProperties[] = "'client_transaction_id' can't be null";
        }
        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['communicated_buying_price'] === null) {
            $invalidProperties[] = "'communicated_buying_price' can't be null";
        }
        if ($this->container['actual_buying_price'] === null) {
            $invalidProperties[] = "'actual_buying_price' can't be null";
        }
        if ($this->container['selling_price'] === null) {
            $invalidProperties[] = "'selling_price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique ID of the reservation
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets client_transaction_id
     *
     * @return string
     */
    public function getClientTransactionId()
    {
        return $this->container['client_transaction_id'];
    }

    /**
     * Sets client_transaction_id
     *
     * @param string $client_transaction_id The unique ID of the transaction as provided by the client
     *
     * @return $this
     */
    public function setClientTransactionId($client_transaction_id)
    {
        $this->container['client_transaction_id'] = $client_transaction_id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku SKU of the product
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state State of the reservation. Possible values: 0 = CREATED, The reservation has been made and can be completed by placing an order with the reservation ID within the expiration time; 1 = COMPLETED, An order was placed with the reservation ID; 2 = EXPIRED, The reservation has expired and can no longer be completed
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Unique ID of the order. Will only be present if the reservation was completed by placing an order with the ID of this reservation
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created Date/time the reservation was made
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return string
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param string $expiration Date/time the reservation will expire
     *
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets communicated_buying_price
     *
     * @return \Genba\Client\Model\BuyingPrice
     */
    public function getCommunicatedBuyingPrice()
    {
        return $this->container['communicated_buying_price'];
    }

    /**
     * Sets communicated_buying_price
     *
     * @param \Genba\Client\Model\BuyingPrice $communicated_buying_price communicated_buying_price
     *
     * @return $this
     */
    public function setCommunicatedBuyingPrice($communicated_buying_price)
    {
        $this->container['communicated_buying_price'] = $communicated_buying_price;

        return $this;
    }

    /**
     * Gets actual_buying_price
     *
     * @return \Genba\Client\Model\BuyingPrice
     */
    public function getActualBuyingPrice()
    {
        return $this->container['actual_buying_price'];
    }

    /**
     * Sets actual_buying_price
     *
     * @param \Genba\Client\Model\BuyingPrice $actual_buying_price actual_buying_price
     *
     * @return $this
     */
    public function setActualBuyingPrice($actual_buying_price)
    {
        $this->container['actual_buying_price'] = $actual_buying_price;

        return $this;
    }

    /**
     * Gets selling_price
     *
     * @return \Genba\Client\Model\SellingPrice
     */
    public function getSellingPrice()
    {
        return $this->container['selling_price'];
    }

    /**
     * Sets selling_price
     *
     * @param \Genba\Client\Model\SellingPrice $selling_price selling_price
     *
     * @return $this
     */
    public function setSellingPrice($selling_price)
    {
        $this->container['selling_price'] = $selling_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


