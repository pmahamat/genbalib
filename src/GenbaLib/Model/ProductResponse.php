<?php
/**
 * ProductResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Genba\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Genba Digital Distribution API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Genba\Client\Model;

use \ArrayAccess;
use \Genba\Client\ObjectSerializer;

/**
 * ProductResponse Class Doc Comment
 *
 * @category Class
 * @package  Genba\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sku' => 'string',
        'region_code' => 'string',
        'name' => 'string',
        'release_date' => 'string',
        'digital_release_date' => 'string',
        'end_date' => 'string',
        'platform' => 'string',
        'publisher' => 'string',
        'developer' => 'string',
        'protection_system' => 'string',
        'key_provider' => '\Genba\Client\Model\KeyProvider',
        'genres' => 'string[]',
        'meta_data' => '\Genba\Client\Model\MetaData[]',
        'global_trade_item_numbers' => '\Genba\Client\Model\GlobalTradeItemNumber[]',
        'rating_systems' => '\Genba\Client\Model\RatingSystem[]',
        'languages' => '\Genba\Client\Model\Language[]',
        'localisation_set' => '\Genba\Client\Model\LocalisationSet',
        'countries' => 'string[]',
        'graphics' => '\Genba\Client\Model\Graphic[]',
        'video_ur_ls' => '\Genba\Client\Model\VideoURL[]',
        'restrictions' => '\Genba\Client\Model\Restriction'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sku' => 'uuid',
        'region_code' => null,
        'name' => null,
        'release_date' => null,
        'digital_release_date' => null,
        'end_date' => null,
        'platform' => null,
        'publisher' => null,
        'developer' => null,
        'protection_system' => null,
        'key_provider' => null,
        'genres' => null,
        'meta_data' => null,
        'global_trade_item_numbers' => null,
        'rating_systems' => null,
        'languages' => null,
        'localisation_set' => null,
        'countries' => null,
        'graphics' => null,
        'video_ur_ls' => null,
        'restrictions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'Sku',
        'region_code' => 'RegionCode',
        'name' => 'Name',
        'release_date' => 'ReleaseDate',
        'digital_release_date' => 'DigitalReleaseDate',
        'end_date' => 'EndDate',
        'platform' => 'Platform',
        'publisher' => 'Publisher',
        'developer' => 'Developer',
        'protection_system' => 'ProtectionSystem',
        'key_provider' => 'KeyProvider',
        'genres' => 'Genres',
        'meta_data' => 'MetaData',
        'global_trade_item_numbers' => 'GlobalTradeItemNumbers',
        'rating_systems' => 'RatingSystems',
        'languages' => 'Languages',
        'localisation_set' => 'LocalisationSet',
        'countries' => 'Countries',
        'graphics' => 'Graphics',
        'video_ur_ls' => 'VideoURLs',
        'restrictions' => 'Restrictions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
        'region_code' => 'setRegionCode',
        'name' => 'setName',
        'release_date' => 'setReleaseDate',
        'digital_release_date' => 'setDigitalReleaseDate',
        'end_date' => 'setEndDate',
        'platform' => 'setPlatform',
        'publisher' => 'setPublisher',
        'developer' => 'setDeveloper',
        'protection_system' => 'setProtectionSystem',
        'key_provider' => 'setKeyProvider',
        'genres' => 'setGenres',
        'meta_data' => 'setMetaData',
        'global_trade_item_numbers' => 'setGlobalTradeItemNumbers',
        'rating_systems' => 'setRatingSystems',
        'languages' => 'setLanguages',
        'localisation_set' => 'setLocalisationSet',
        'countries' => 'setCountries',
        'graphics' => 'setGraphics',
        'video_ur_ls' => 'setVideoUrLs',
        'restrictions' => 'setRestrictions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
        'region_code' => 'getRegionCode',
        'name' => 'getName',
        'release_date' => 'getReleaseDate',
        'digital_release_date' => 'getDigitalReleaseDate',
        'end_date' => 'getEndDate',
        'platform' => 'getPlatform',
        'publisher' => 'getPublisher',
        'developer' => 'getDeveloper',
        'protection_system' => 'getProtectionSystem',
        'key_provider' => 'getKeyProvider',
        'genres' => 'getGenres',
        'meta_data' => 'getMetaData',
        'global_trade_item_numbers' => 'getGlobalTradeItemNumbers',
        'rating_systems' => 'getRatingSystems',
        'languages' => 'getLanguages',
        'localisation_set' => 'getLocalisationSet',
        'countries' => 'getCountries',
        'graphics' => 'getGraphics',
        'video_ur_ls' => 'getVideoUrLs',
        'restrictions' => 'getRestrictions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['region_code'] = isset($data['region_code']) ? $data['region_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['digital_release_date'] = isset($data['digital_release_date']) ? $data['digital_release_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['publisher'] = isset($data['publisher']) ? $data['publisher'] : null;
        $this->container['developer'] = isset($data['developer']) ? $data['developer'] : null;
        $this->container['protection_system'] = isset($data['protection_system']) ? $data['protection_system'] : null;
        $this->container['key_provider'] = isset($data['key_provider']) ? $data['key_provider'] : null;
        $this->container['genres'] = isset($data['genres']) ? $data['genres'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
        $this->container['global_trade_item_numbers'] = isset($data['global_trade_item_numbers']) ? $data['global_trade_item_numbers'] : null;
        $this->container['rating_systems'] = isset($data['rating_systems']) ? $data['rating_systems'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['localisation_set'] = isset($data['localisation_set']) ? $data['localisation_set'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['graphics'] = isset($data['graphics']) ? $data['graphics'] : null;
        $this->container['video_ur_ls'] = isset($data['video_ur_ls']) ? $data['video_ur_ls'] : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $data['restrictions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ($this->container['region_code'] === null) {
            $invalidProperties[] = "'region_code' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku The SKU is the unique identifier of a product
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets region_code
     *
     * @return string
     */
    public function getRegionCode()
    {
        return $this->container['region_code'];
    }

    /**
     * Sets region_code
     *
     * @param string $region_code Code of the region where the product is intended for
     *
     * @return $this
     */
    public function setRegionCode($region_code)
    {
        $this->container['region_code'] = $region_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the product
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return string
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param string $release_date Release date of the product
     *
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets digital_release_date
     *
     * @return string
     */
    public function getDigitalReleaseDate()
    {
        return $this->container['digital_release_date'];
    }

    /**
     * Sets digital_release_date
     *
     * @param string $digital_release_date Digital release date of the product
     *
     * @return $this
     */
    public function setDigitalReleaseDate($digital_release_date)
    {
        $this->container['digital_release_date'] = $digital_release_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date End of life date of the product
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform Platform of the product
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets publisher
     *
     * @return string
     */
    public function getPublisher()
    {
        return $this->container['publisher'];
    }

    /**
     * Sets publisher
     *
     * @param string $publisher Publisher of the product
     *
     * @return $this
     */
    public function setPublisher($publisher)
    {
        $this->container['publisher'] = $publisher;

        return $this;
    }

    /**
     * Gets developer
     *
     * @return string
     */
    public function getDeveloper()
    {
        return $this->container['developer'];
    }

    /**
     * Sets developer
     *
     * @param string $developer Developer of the product
     *
     * @return $this
     */
    public function setDeveloper($developer)
    {
        $this->container['developer'] = $developer;

        return $this;
    }

    /**
     * Gets protection_system
     *
     * @return string
     */
    public function getProtectionSystem()
    {
        return $this->container['protection_system'];
    }

    /**
     * Sets protection_system
     *
     * @param string $protection_system Protection system of the product (Steam, etc.)
     *
     * @return $this
     */
    public function setProtectionSystem($protection_system)
    {
        $this->container['protection_system'] = $protection_system;

        return $this;
    }

    /**
     * Gets key_provider
     *
     * @return \Genba\Client\Model\KeyProvider
     */
    public function getKeyProvider()
    {
        return $this->container['key_provider'];
    }

    /**
     * Sets key_provider
     *
     * @param \Genba\Client\Model\KeyProvider $key_provider key_provider
     *
     * @return $this
     */
    public function setKeyProvider($key_provider)
    {
        $this->container['key_provider'] = $key_provider;

        return $this;
    }

    /**
     * Gets genres
     *
     * @return string[]
     */
    public function getGenres()
    {
        return $this->container['genres'];
    }

    /**
     * Sets genres
     *
     * @param string[] $genres List of genres
     *
     * @return $this
     */
    public function setGenres($genres)
    {
        $this->container['genres'] = $genres;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return \Genba\Client\Model\MetaData[]
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param \Genba\Client\Model\MetaData[] $meta_data Set of meta data
     *
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets global_trade_item_numbers
     *
     * @return \Genba\Client\Model\GlobalTradeItemNumber[]
     */
    public function getGlobalTradeItemNumbers()
    {
        return $this->container['global_trade_item_numbers'];
    }

    /**
     * Sets global_trade_item_numbers
     *
     * @param \Genba\Client\Model\GlobalTradeItemNumber[] $global_trade_item_numbers Global Trade Item Numbers (GTIN)
     *
     * @return $this
     */
    public function setGlobalTradeItemNumbers($global_trade_item_numbers)
    {
        $this->container['global_trade_item_numbers'] = $global_trade_item_numbers;

        return $this;
    }

    /**
     * Gets rating_systems
     *
     * @return \Genba\Client\Model\RatingSystem[]
     */
    public function getRatingSystems()
    {
        return $this->container['rating_systems'];
    }

    /**
     * Sets rating_systems
     *
     * @param \Genba\Client\Model\RatingSystem[] $rating_systems List of rating systems
     *
     * @return $this
     */
    public function setRatingSystems($rating_systems)
    {
        $this->container['rating_systems'] = $rating_systems;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return \Genba\Client\Model\Language[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \Genba\Client\Model\Language[] $languages List of localised texts for the product
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets localisation_set
     *
     * @return \Genba\Client\Model\LocalisationSet
     */
    public function getLocalisationSet()
    {
        return $this->container['localisation_set'];
    }

    /**
     * Sets localisation_set
     *
     * @param \Genba\Client\Model\LocalisationSet $localisation_set localisation_set
     *
     * @return $this
     */
    public function setLocalisationSet($localisation_set)
    {
        $this->container['localisation_set'] = $localisation_set;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return string[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param string[] $countries Countries
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets graphics
     *
     * @return \Genba\Client\Model\Graphic[]
     */
    public function getGraphics()
    {
        return $this->container['graphics'];
    }

    /**
     * Sets graphics
     *
     * @param \Genba\Client\Model\Graphic[] $graphics List of images of the product
     *
     * @return $this
     */
    public function setGraphics($graphics)
    {
        $this->container['graphics'] = $graphics;

        return $this;
    }

    /**
     * Gets video_ur_ls
     *
     * @return \Genba\Client\Model\VideoURL[]
     */
    public function getVideoUrLs()
    {
        return $this->container['video_ur_ls'];
    }

    /**
     * Sets video_ur_ls
     *
     * @param \Genba\Client\Model\VideoURL[] $video_ur_ls List of videos of the product
     *
     * @return $this
     */
    public function setVideoUrLs($video_ur_ls)
    {
        $this->container['video_ur_ls'] = $video_ur_ls;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \Genba\Client\Model\Restriction
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \Genba\Client\Model\Restriction $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


