<?php
/**
 * Language
 *
 * PHP version 5
 *
 * @category Class
 * @package  Genba\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Genba Digital Distribution API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.2
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Genba\Client\Model;

use \ArrayAccess;
use \Genba\Client\ObjectSerializer;

/**
 * Language Class Doc Comment
 *
 * @category Class
 * @package  Genba\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Language implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Language';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'language_name' => 'string',
        'localised_name' => 'string',
        'localised_description' => 'string',
        'legal_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'language_name' => null,
        'localised_name' => null,
        'localised_description' => null,
        'legal_text' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'language_name' => 'LanguageName',
        'localised_name' => 'LocalisedName',
        'localised_description' => 'LocalisedDescription',
        'legal_text' => 'LegalText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'language_name' => 'setLanguageName',
        'localised_name' => 'setLocalisedName',
        'localised_description' => 'setLocalisedDescription',
        'legal_text' => 'setLegalText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'language_name' => 'getLanguageName',
        'localised_name' => 'getLocalisedName',
        'localised_description' => 'getLocalisedDescription',
        'legal_text' => 'getLegalText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['language_name'] = isset($data['language_name']) ? $data['language_name'] : null;
        $this->container['localised_name'] = isset($data['localised_name']) ? $data['localised_name'] : null;
        $this->container['localised_description'] = isset($data['localised_description']) ? $data['localised_description'] : null;
        $this->container['legal_text'] = isset($data['legal_text']) ? $data['legal_text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets language_name
     *
     * @return string
     */
    public function getLanguageName()
    {
        return $this->container['language_name'];
    }

    /**
     * Sets language_name
     *
     * @param string $language_name Name of the language
     *
     * @return $this
     */
    public function setLanguageName($language_name)
    {
        $this->container['language_name'] = $language_name;

        return $this;
    }

    /**
     * Gets localised_name
     *
     * @return string
     */
    public function getLocalisedName()
    {
        return $this->container['localised_name'];
    }

    /**
     * Sets localised_name
     *
     * @param string $localised_name Locatised name of the product
     *
     * @return $this
     */
    public function setLocalisedName($localised_name)
    {
        $this->container['localised_name'] = $localised_name;

        return $this;
    }

    /**
     * Gets localised_description
     *
     * @return string
     */
    public function getLocalisedDescription()
    {
        return $this->container['localised_description'];
    }

    /**
     * Sets localised_description
     *
     * @param string $localised_description Locatised description of the product
     *
     * @return $this
     */
    public function setLocalisedDescription($localised_description)
    {
        $this->container['localised_description'] = $localised_description;

        return $this;
    }

    /**
     * Gets legal_text
     *
     * @return string
     */
    public function getLegalText()
    {
        return $this->container['legal_text'];
    }

    /**
     * Sets legal_text
     *
     * @param string $legal_text Locatised legal text of the product
     *
     * @return $this
     */
    public function setLegalText($legal_text)
    {
        $this->container['legal_text'] = $legal_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


